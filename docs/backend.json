{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile within the PennyWise application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "savingsGoalIds": {
          "type": "array",
          "description": "References to SavingsGoals. (Relationship: UserProfile 1:N SavingsGoal)",
          "items": {
            "type": "string"
          }
        },
        "notificationPreferences": {
          "type": "object",
          "description": "Users' notification preferences.",
          "properties": {
            "emailReminders": {
              "type": "boolean"
            },
            "weeklySummary": {
              "type": "boolean"
            }
          }
        },
        "themePreference": {
          "type": "string",
          "description": "Users' theme preference (e.g., light/dark mode)."
        },
        "profileVisibility": {
          "type": "string",
          "enum": [
            "public",
            "private"
          ],
          "description": "User's profile visibility preference."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email"
      ]
    },
    "SavingsGoal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SavingsGoal",
      "type": "object",
      "description": "Represents a specific savings goal set by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the savings goal."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N SavingsGoal)"
        },
        "targetAmount": {
          "type": "number",
          "description": "The target amount to be saved."
        },
        "currentAmount": {
          "type": "number",
          "description": "The current amount saved towards the goal."
        },
        "deadline": {
          "type": "string",
          "description": "The deadline for achieving the savings goal.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userProfileId",
        "targetAmount",
        "currentAmount",
        "deadline"
      ]
    },
    "Transaction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Transaction",
      "type": "object",
      "description": "Represents a financial transaction recorded in the PennyWise application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the transaction."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Transaction)"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the transaction."
        },
        "date": {
          "type": "string",
          "description": "The date of the transaction.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "A description of the transaction."
        },
        "category": {
          "type": "string",
          "description": "The category of the transaction (e.g., groceries, entertainment)."
        }
      },
      "required": [
        "id",
        "userProfileId",
        "amount",
        "date",
        "description",
        "category"
      ]
    },
    "PennyPoint": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PennyPoint",
      "type": "object",
      "description": "Represents reward points earned by users in the PennyWise application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the penny point record."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N PennyPoint)"
        },
        "pointsEarned": {
          "type": "number",
          "description": "The number of points earned."
        },
        "dateEarned": {
          "type": "string",
          "description": "The date the points were earned.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "Description of the action that earned the points."
        }
      },
      "required": [
        "id",
        "userProfileId",
        "pointsEarned",
        "dateEarned",
        "description"
      ]
    },
    "Investment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Investment",
      "type": "object",
      "description": "Represents a user's investment in the PennyWise application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the investment."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile."
        },
        "amount": {
          "type": "number",
          "description": "The amount invested."
        },
        "date": {
          "type": "string",
          "description": "The date of the investment.",
          "format": "date-time"
        },
        "returns": {
          "type": "number",
          "description": "The returns generated from the investment."
        }
      },
      "required": [
        "id",
        "userProfileId",
        "amount",
        "date"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/userProfile",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Uses path-based ownership for security.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/savingsGoals/{savingsGoalId}",
        "definition": {
          "entityName": "SavingsGoal",
          "schema": {
            "$ref": "#/backend/entities/SavingsGoal"
          },
          "description": "Stores the savings goals for each user. Uses path-based ownership for security.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "savingsGoalId",
              "description": "The unique identifier for the savings goal."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/transactions/{transactionId}",
        "definition": {
          "entityName": "Transaction",
          "schema": {
            "$ref": "#/backend/entities/Transaction"
          },
          "description": "Stores transaction data, ensuring only the authenticated user can access their own transaction data. Uses path-based ownership for security.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "transactionId",
              "description": "The unique identifier for the transaction."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/pennyPoints/{pennyPointId}",
        "definition": {
          "entityName": "PennyPoint",
          "schema": {
            "$ref": "#/backend/entities/PennyPoint"
          },
          "description": "Stores penny point records for gamified savings experiences. Uses path-based ownership for security.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "pennyPointId",
              "description": "The unique identifier for the penny point record."
            }
          ]
        }
      },
       {
        "path": "/users/{userId}/investments/{investmentId}",
        "definition": {
          "entityName": "Investment",
          "schema": {
            "$ref": "#/backend/entities/Investment"
          },
          "description": "Stores user investment data. Uses path-based ownership for security.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "investmentId",
              "description": "The unique identifier for the investment record."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure security, scalability, and ease of debugging, following the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters).  Authorization Independence is achieved through path-based ownership and avoiding `get()` calls in security rules.  Structural Segregation separates user-specific data. Access Modeling uses path-based ownership for private data, enhancing security and simplifying rules. All collections are designed with homogeneous security requirements.\n\n*   `/users/{userId}/userProfile`: Stores user profile information.  This structure provides straightforward ownership-based security. There is no mixing of data with different security needs in the same collection. Access control is simplified and highly secure due to the direct path-based ownership.  This directly supports QAPs by ensuring list operations are scoped to the authenticated user.\n*   `/users/{userId}/savingsGoals/{savingsGoalId}`: Stores the savings goals for each user. This structure allows for easy querying of a specific user's savings goals, as well as securing access to only the data of an authenticated user.\n*   `/users/{userId}/transactions/{transactionId}`: Stores transaction data, facilitating easy tracking and analysis of a user's financial transactions. The path-based approach ensures that only the authenticated user can access their own transaction data.\n*   `/users/{userId}/pennyPoints/{pennyPointId}`: Stores penny point records for gamified savings experiences. Access is restricted to the authenticated user. The path-based structure ensures efficient and secure retrieval of a user's point history.\n*   `/users/{userId}/investments/{investmentId}`: Stores user investment records. Access is restricted to the authenticated user, ensuring data privacy and security."
  }
}
    